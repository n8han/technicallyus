<!DOCTYPE HTML>
<html>
<head>
<link rel="stylesheet" href="/blueprint/screen.css" type="text/css" media="screen, projection">
<link rel="stylesheet" href="/blueprint/print.css" type="text/css" media="print">  

<!--[if IE]><link rel="stylesheet" href="/blueprint/lib/ie.css" type="text/css" media="screen, projection"><![endif]-->

<link rel="stylesheet" type="text/css" href="../../../resources/com.typeturner.pages.Home/typeturner_en_US.css"/>
<link rel="stylesheet" type="text/css" href="../../../resources/org.apache.wicket.Application/code-stylesheet"/>

<script language="JavaScript" src="../../../resources/com.typeturner.pages.WeblogPage/WeblogPage_en_US.js"></script>

<meta name="generator" content="Typeturner" />

<title>Coderspiel / Giving it a rest</title>
<script type="text/javascript" src="../../../resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js"></script>
<script type="text/javascript" src="../../../resources/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax.js"></script>
</head>

<body onload="initTypeturner();">



<div class="container">

<div>
<div class="prepend-3 span-11 last lead">
	<span id="weblog-name">
		<a href="../../../code">
			
			<img alt="Coderspiel" src="../../../resources/org.apache.wicket.Application/code-nameImage.png"/>
		</a>
	</span>
	<a class="home-link" href="../../../code">
		<span id="weblog-photo"><img alt="" src="../../../resources/org.apache.wicket.Application/code-photo"/></span>
	</a>
</div>
</div>

<div class="prepend-3 span-8 append-3 last">
	
	<div id="id2301" class="post">
		<h2 class="title"><span class="image-wrapper"><img height="47" alt="Giving it a rest" width="230" class="title" src="../../../resources/net.databinder.components.RenderedLabel/3c3765f1"/><span class="title">Giving it a rest</span></span></h2>
		<div class="byline"><span>
			<span>By <span class="alias">n8han</span>, <span>on March 8, 2008</span></span>
			<span id="id2302" class="tags">
					{&nbsp;<span><a href="../../../code/tag/databinder/#selected-tag"><span>databinder</span></a><span id="id2303">, </span></span><span><a href="../../../code/tag/markup/#selected-tag"><span>markup</span></a><span id="id2304">, </span></span><span><a href="../../../code/tag/ruby/#selected-tag"><span>ruby</span></a><span id="id2305">, </span></span><span><a href="../../../code/tag/http/#selected-tag"><span>http</span></a></span>&nbsp;}
			</span>
		</span></div>
		<div><p>Last year Databinder interfaced with Ruby for text processing, using <abbr title='extensible markup language'>XML</abbr>-<abbr title='remote procedure call'>RPC</abbr> because it seemed like the easiest option. The project ran years late and millions of dollars over budget.</p>

<p>Just kidding&#8212;it went fine of course. (And Databinder nets a cool zero million no matter which way the wind blows.) Using a scripting language in an external runtime for text processing, and caching the results, has been an unmitigated success. This is why probably no one else in Java is doing it. They would rather use those <em>what you see is the tip of an ugly iceberg</em> editors and warehouse a bunch of disgusting <abbr>HTML</abbr> generated by Microsoft Word. (This happens by way of the clipboard.)</p>

<p>But! Smart people prefer <abbr>REST</abbr> over <abbr title='extensible markup language'>XML</abbr>-<abbr title='remote procedure call'>RPC</abbr>. It&#8217;s true. Anything that abstracts remote procedure calls over <abbr title='hypertext transfer protocol'>HTTP</abbr> is bad according to them, even things less obviously torturous than <abbr>SOAP</abbr>. Maybe they&#8217;re right. It&#8217;s definitely true that you don&#8217;t need <abbr title='extensible markup language'>XML</abbr> to represent the single input and output strings of this chore, nor the abstraction of remote procedure calls.</p>

<p class='break'>Some parts of the <abbr>REST</abbr> creed are unappealing. Basically everything starting with the word &#8220;always.&#8221; And Wicket as a web framework is the anti-<abbr>REST</abbr>. So, there&#8217;s that. But unlike actual religion, with programming religions you can pick the parts you like and use them without being burned at the stake. At least not physically.</p>

<p>The part about <abbr>REST</abbr> that rules is just getting stuff done with the world&#8217;s de facto standard of software communication whenever feasible. Databinder&#8217;s simple problem, shuttling markup strings between the <abbr>JVM</abbr> and Ruby runtime, can be directly handled by <abbr title='hypertext transfer protocol'>HTTP</abbr>. To use any other protocol, or layer something on top of this one, is just silly.</p>

<p>Old databinder-dispatch was a Java library depending on some <abbr title='extensible markup language'>XML</abbr>-<abbr title='remote procedure call'>RPC</abbr> libs that themselves depended on HttpClient. New databinder-dispatch dumps those other libs and also (why not?) is written in Scala. Um,</p>

<p class='liner'> Dispatch is the first Databinder module to be rewritten in Scala. Last June this weblog <a href='http://technically.us/code/x/the-escape-hatch#what_this_all_means'>brashly pro&shy;claimed</a> its hope to rewrite the entire toolkit in Scala. Plans change though! Instead of porting the <a href='http://technically.us/code/x/organically-grown/'>now-plural</a> persistence modules, it makes more sense to factor <em>out</em> IModel using first class functions. A page would acquire needed values, <a href='http://couchdb.org/'>some how</a>, and bind them to components as by-name parameters.</p>

<pre><code>val post_method = new PostMethod(server_base + path_name)
post_method.setParameter(&quot;input&quot;, source.toString())
post_method.setRequestHeader(
 &quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded; charset=utf-8&quot;)

(new HttpClient).executeMethod(post_method) match {
  case 200 =&gt; ()
  case code =&gt; error(&quot;Bad response code: &quot; + code)
}
val out = post_method.getResponseBodyAsString()</code></pre>

<p>So basically it&#8217;s posting some <abbr>UTF-8</abbr> text to an endpoint defined externally. And on the Ruby side:</p>

<pre><code>srv = HTTPServer.new( :Port =&gt; 8180 )
def create_server(srv, name, &amp;convert)
  srv.mount_proc(&#39;/&#39; + name) do |req, resp|
    require name
    resp.body = convert.call(req.query[&#39;input&#39;])
    resp[&#39;Content-Type&#39;] = &#39;text/html; charset=utf-8&#39;
  end
end</code></pre>

<p>The only annoying thing here is having to verbosely specify <abbr>UTF-8</abbr> all over the place. But if you don&#8217;t do that, and then roll out to some environment that defaults to the evil Latin-1, forget about your em dashes and curved quotes surviving a round trip. The Ruby side doesn&#8217;t seem to pay much attention to the encoding either way, but HttpClient needs to know on both ends that it&#8217;s <abbr>UTF-8</abbr> or it will assume whatever the <abbr>JVM</abbr>&#8217;s default is. (It would be nice if there were a terse way to set a local default when instantiating the HttpClient!) (It would be nice if WEBrick echoed whatever content type encoding header came in!)</p>

<p class='liner'> <em>Later:</em> The trunk code is using HttpClient 4 inside a <a href='http://databinder.net/wsvn/Databinder/databinder/trunk/databinder-dispatch/src/main/scala/net/databinder/dispatch/Http.scala?op=file'>Scala wrapper</a> (inherited, not implied), that changes the client&#8217;s default to <abbr>UTF-8</abbr>.</p>

<p>All told, the <abbr title='hypertext transfer protocol'>HTTP</abbr>-only code was not any harder to write than the original <abbr title='extensible markup language'>XML</abbr>-<abbr title='remote procedure call'>RPC</abbr> code was. (For more extensive Scala <abbr>REST</abbr> coding it would be worth writing a few <a href='http://technically.us/code/x/the-awesomeness-of-scala-is-implicit'>implicit wrappers</a> for HttpClient.) The two can&#8217;t be compared line to line, since the Java became Scala and the Ruby has become a fuller-fledged init.d service, but feel free to poke around:</p>

<ul>
<li><a href='http://databinder.net/wsvn/Databinder/databinder/tags/r1.1.1/databinder-dispatch/src/main/java/net/databinder/dispatch/components/XmlRpcLabel.java?op=file'>XmlRpcLabel.java</a></li>

<li><a href='http://databinder.net/wsvn/Databinder/databinder/tags/r1.1.1/databinder-dispatch/src/main/resources/net/databinder/dispatch/components/databinder-dispatch.rb?op=file'>databinder-dispatch.rb</a> — <abbr title='extensible markup language'>XML</abbr>-<abbr title='remote procedure call'>RPC</abbr></li>

<li><a href='http://databinder.net/wsvn/Databinder/databinder/trunk/databinder-dispatch/src/main/scala/net/databinder/dispatch/components/HttpPostConverter.scala?op=file'>HttpPostConverter.scala</a></li>

<li><a href='http://databinder.net/wsvn/Databinder/databinder/trunk/databinder-dispatch/src/main/resources/net/databinder/dispatch/components/databinder-dispatch.rb?op=file&amp;'>databinder-dispatch.rb</a> — <abbr title='hypertext transfer protocol'>HTTP</abbr></li>
</ul>

<p>And of course there are some pre-fab components set up to use the HttpConverter that entirely abstract out the remote business. The old version had a base XmlRpcLabel and a pile of subclasses <a href='http://databinder.net/wsvn/Databinder/databinder/tags/r1.1.1/databinder-dispatch/src/main/java/net/databinder/dispatch/components/'>in separate source files</a> because in Java you have no choice. The new version just has the <abbr title='hypertext transfer protocol'>HTTP</abbr> converter and puts all the text format classes (which are mostly one-liners anyway) in <a href='http://databinder.net/wsvn/Databinder/databinder/trunk/databinder-dispatch/src/main/scala/net/databinder/dispatch/components/TextFormattedLabel.scala?op=file'>a single TextFormattedLabel source file</a>.</p>

<p>The top-level Scala components like TextileLabel can be as easily accessed from Java as regular Java classes. But working with the format signifiers&#8212;if you need to select a format at runtime&#8212;is trickier, because they are singleton objects like <code>Textile$.MODULE$</code>. But it does work.</p>

<p class='break'>Next week let&#8217;s rewrite this in <abbr>SOAP</abbr> for another comparison! Just kidding that would suck.</p></div>
	</div>
</div>

<div class="span-3 sidebar" id="postSidebar">
  <div><h3 id='about_coderspiel'>About <em>Coderspiel</em></h3>

<p>This weblog is dedicated to programming with creative license, by <a href='http://twitter.com/n8han'>@n8han</a> / <a href='mailto:nathan@technically.us'>nathan@technically.us</a>.</p>

<h3 id='news_feeds'>News Feeds</h3>

<p><a href='http://technically.us/resources/com.typeturner.Typeturner/code-rss' title='All content in one feed'>Everything</a><br /><a href='http://technically.us/resources/com.typeturner.Typeturner/code-short-rss' title='Left column, frequent links and notes'>Short</a><br /><a href='http://technically.us/resources/com.typeturner.Typeturner/code-long-rss' title='Main column, infrequent lengthy posts'>Long</a></p>

<h3 id='codershelf'>Codershelf</h3>

<p><a href='http://waffle.wootest.net/'>Waffle</a></p></div>
</div>

<div class="span-8 append-3 last">
  <div id="comments">
    <div id="id2306">
  		<div><h3 id='codercomments'>Codercomments</h3></div>
  		<div>
  			<div id="item-5248"><p>Dump Webrick, get Thin instead (gem install thin), then run:</p>

<p>thin start &#8211;stats /stats</p>

<p>Point the browser to localhost:3000/stats and you can see the headers of the last request.</p></div>
  			<div class="date byline">
  				
  				<a href="http://labnotes.org"><span class="alias">Assaf</span></a>
  				<span>on March 9, 2008</span>
  			</div>
  		</div><div>
  			<div id="item-5249"><p>Any particular reason to use an external Ruby instance rather than embedded JRuby? I would imagine this would be somewhat easier to deal with, especially since it doesn&#8217;t require an entirely separate app stack.</p></div>
  			<div class="date byline">
  				
  				<a href="http://www.codecommit.com/blog"><span class="alias">Daniel Spiewak</span></a>
  				<span>on March 9, 2008</span>
  			</div>
  		</div><div>
  			<div id="item-5250"><p>Assaf, that would have been helpful for debugging the character set. Although, what I meant is that if I post with a certain claimed encoding, I would like for the response to also claim that encoding. Maybe I will try in Thin and see if does.</p>

<p>Daniel, I think it will be easier some day but at the moment it probably sounds a lot easier than it is. I did the analogue once with Jython, and got it working eventually. The thing is, I already have stable Ruby environments on all my servers where I can do things like <code>gem update maruku</code>. My feeling is that JRuby is not there yet, especially not if I stick with embedded Jetty. (Glassfish, <a href='http://www.zeroturnaround.com/blog/glassfish-installation-from-hell/'>forget it</a>.) Plus I don&#8217;t particularly want to burden my app instance with a scripting runtime when it&#8217;s already got scala-lib and such. So I find this approach to be counterintuitively simpler than the one that would occur to most people (and myself, with Jython) first.</p></div>
  			<div class="date byline">
  				
  				<span><span class="alias">n8</span></span>
  				<span>on March 9, 2008</span>
  			</div>
  		</div><div>
  			<div id="item-5253"><p>HTTP makes a separation between the request format and response format. To tell the server which format you accept, you use Accept headers, the one you&#8217;re looking for is Accept-Charset.</p>

<p>That allows you to post url-encoded or multipart with a JPEG image, but get back an HTML document, or post something in Russian but get back a UTF-8 page that mixes multiple languages.</p>

<p>Thin won&#8217;t break that behavior.</p></div>
  			<div class="date byline">
  				
  				<a href="http://labnotes.org"><span class="alias">Assaf</span></a>
  				<span>on March 9, 2008</span>
  			</div>
  		</div><div>
  			<div id="item-5254"><p>I just tried Accept-Charset, but it doesn&#8217;t change the outcome; WEBbrick replies without specifying any content type. I suppose the problem is I&#8217;m expecting it to look at the response.body I&#8217;ve set (a string) and add the meta data. But it doesn&#8217;t know the character set, and couldn&#8217;t know what the text represents. So this is fine I guess.</p></div>
  			<div class="date byline">
  				
  				<span><span class="alias">n8</span></span>
  				<span>on March 9, 2008</span>
  			</div>
  		</div><div>
  			<div id="item-5255"><p>It better not change the outcome. If Webrick started messing with the response body, a lot of apps would go breaking.</p></div>
  			<div class="date byline">
  				
  				<a href="http://labnotes.org"><span class="alias">Assaf</span></a>
  				<span>on March 10, 2008</span>
  			</div>
  		</div><div>
  			<div id="item-5256"><p>Yes.</p></div>
  			<div class="date byline">
  				
  				<span><span class="alias">n8</span></span>
  				<span>on March 10, 2008</span>
  			</div>
  		</div><div>
  			<div id="item-6227"><p>Hello, I would like to try something fresh and new like REST vs the old-way of doing a web app CRUD but right now I&#8217;m up-to-my-neck in web-app rewrite from someone that used a code-generation tool. Though, Hibernate is considered a code-generation tool the application I am dealing with was written completely front to back including the ugly 2005 SQL Server database, no, database is not correct. More correctly this code-generator created 1500+ tables of 2005 SQL Server repository of everything web-app including the storage of HTML snippets. The database finds no PK or FK anywhere! This is why I am attempting to use Databinder. I enjoyed an immediate modicum of success right away with the baseball web-app example but things quickly came to an end when I tried to use variables of type: Integer, Long or anything that was not a String. The real show-stopper is there is no support to be had anywhere.</p></div>
  			<div class="date byline">
  				
  				<a href="http://www.davidwbrown.name"><span class="alias">geezenslaw</span></a>
  				<span>on April 7, 2009</span>
  			</div>
  		</div><div>
  			<div id="item-6228"><p>geezenslaw, if you see this message, please check your spam folder or settings. I&#8217;ve replied to your e-mails and not gotten a bounce back. You have an account on the Databinder forum, the password is in the email. I&#8217;ll be happy to answer your questions on the forum.</p></div>
  			<div class="date byline">
  				
  				<span><span class="alias">n8</span></span>
  				<span>on April 7, 2009</span>
  			</div>
  		</div><div>
  			<div id="item-6585"><p>Anybody knows usable xml-rpc library for scala?</p></div>
  			<div class="date byline">
  				
  				<a href="http://iphonesolarcharger.info/"><span class="alias">Alan</span></a>
  				<span>on January 25, 2010</span>
  			</div>
  		</div>
  	</div>
  	<div id="id2307">
  	  <h3 id="add-comment">Add a comment</h3>
  		<form id="id2308" action="../../../" class="labelAbove" method="get"><div style="display:none"><input type="hidden" name="id2308_hf_0" id="id2308_hf_0" /><input type="hidden" name="wicket:interface" value=":1300:formWrapper:addComment::IFormSubmitListener::" /></div>
  		  <div id="id2309" class="feedback">
  
</div>
  			<div class="row">
  				<label>Name</label>
  				<input name="commenterName" value="" type="text"/>
  			</div>
  			<div class="row">
  				<label>E-mail <span class="note">(will not appear with comment)</span></label>
  				<input name="commenterEmail" value="" type="text"/>
  			</div>
  			<div class="row">
  				<label>Web site <span class="note">(optional)</span></label>
  				<input name="commenterSite" value="http://" class="web" type="text"/>
  			</div>
  			<div>
  				<label>Comment</label>
  				<textarea name="body"></textarea>
  			</div>
  			<p><input id="id230a" name="add" value="Add a comment" onclick="wicketShow('id230a--ajax-indicator');var wcall=wicketSubmitFormById('id2308', '../../../?wicket:interface=:1300:formWrapper:addComment:add::IActivePageBehaviorListener:0:3&amp;wicket:ignoreIfNotActive=true', 'add' ,function(){;wicketHide('id230a--ajax-indicator');}.bind(this),function() { ;wicketHide('id230a--ajax-indicator');}.bind(this), function() {return Wicket.$$(this)&amp;&amp;Wicket.$$('id2308')}.bind(this));;; return false;" type="submit"/><span style="display:none;" class="wicket-ajax-indicator" id="id230a--ajax-indicator"><img src="../../../resources/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/indicator.gif" alt=""/></span></p>		
  		</form>
  	</div>
  </div>
</div>
	
</div> <!-- container -->



</body>
</html>
